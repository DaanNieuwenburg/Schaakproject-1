<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbLogo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>